require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { Sequelize, DataTypes } = require('sequelize');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: 'database.sqlite',
});

// –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const User = sequelize.define('User', {
  id: { type: DataTypes.INTEGER, primaryKey: true },
  eggs: { type: DataTypes.DECIMAL(10, 2), defaultValue: 0.0 },
  money: { type: DataTypes.DECIMAL(10, 2), defaultValue: 50.0 },
  lastCollection: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },
  chicken_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  duck_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  goose_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  cow_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  pig_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  sheep_count: { type: DataTypes.INTEGER, defaultValue: 0 }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –∂–∏–≤–æ—Ç–Ω—ã—Ö
const ANIMALS = {
  chicken: {
    name: 'üêî –ö—É—Ä–∏—Ü–∞',
    price: 50,
    eggsPerMinute: 0.1,
    description: '6 —è–∏—Ü/—á–∞—Å'
  },
  duck: {
    name: 'ü¶Ü –£—Ç–∫–∞',
    price: 100, 
    eggsPerMinute: 0.3,
    description: '18 —è–∏—Ü/—á–∞—Å'
  },
  goose: {
    name: 'ü¶¢ –ì—É—Å—å',
    price: 200,
    eggsPerMinute: 0.5,
    description: '30 —è–∏—Ü/—á–∞—Å'
  },
  cow: {
    name: 'üêÑ –ö–æ—Ä–æ–≤–∞',
    price: 500,
    eggsPerMinute: 1,
    description: '60 —è–∏—Ü/—á–∞—Å'
  },
  pig: {
    name: 'üêñ –°–≤–∏–Ω—å—è',
    price: 1000,
    eggsPerMinute: 2,
    description: '120 —è–∏—Ü/—á–∞—Å'
  },
  sheep: {
    name: 'üêë –û–≤—Ü–∞',
    price: 300,
    eggsPerMinute: 0.7,
    description: '42 —è–π—Ü–∞/—á–∞—Å'
  }
};

const bot = new Telegraf(process.env.BOT_TOKEN);

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
const gameKeyboard = Markup.keyboard([
  ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üõí –ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ'],
  ['ü•ö –°–æ–±—Ä–∞—Ç—å —è–π—Ü–∞', 'üí∞ –ü—Ä–æ–¥–∞—Ç—å —è–π—Ü–∞'],
  ['‚ùì –ü–æ–º–æ—â—å']
]).resize();

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
bot.use(async (ctx, next) => {
  const user = await User.findOrCreate({
    where: { id: ctx.from.id },
    defaults: { id: ctx.from.id }
  });
  ctx.user = user[0];
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} (${ctx.from.username}): ${user[1] ? '—Å–æ–∑–¥–∞–Ω' : '–Ω–∞–π–¥–µ–Ω'}`);
  return next();
});

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.start((ctx) => 
  ctx.replyWithMarkdown(
    `üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–µ—Ä–º—É!*\n–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${ctx.user.money.toFixed(2)}üí∞`, 
    gameKeyboard
  )
);

bot.hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å', async (ctx) => {
  console.log(`–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è: ${ctx.from.id}`);
  const user = ctx.user;
  const list = Object.entries(ANIMALS)
    .map(([id, animal]) => {
      const count = user[`${id}_count`];
      return count > 0 ? `${animal.name} - ${count} —à—Ç.` : '';
    })
    .filter(Boolean)
    .join('\n') || '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö';
  
  ctx.replyWithMarkdown(
    `*üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n` +
    `ü•ö *–Ø–π—Ü–∞:* ${user.eggs.toFixed(2)}\n` +
    `üí∞ *–î–µ–Ω—å–≥–∏:* ${user.money.toFixed(2)}\n` +
    `*–ñ–∏–≤–æ—Ç–Ω—ã–µ:*\n${list}`,
    gameKeyboard
  );
});

bot.hears('üõí –ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ', async (ctx) => {
  const buttons = Object.entries(ANIMALS).map(([id, data]) => 
    Markup.button.callback(
      `${data.name} ${data.price}üí∞`,
      `buy_${id}`
    )
  );
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ:', Markup.inlineKeyboard(buttons, { columns: 2 }));
});

bot.hears('ü•ö –°–æ–±—Ä–∞—Ç—å —è–π—Ü–∞', async (ctx) => {
  const now = new Date();
  const last = new Date(ctx.user.lastCollection);
  const minutes = Math.max(0, Math.floor((now - last) / 60000));
  
  console.log(`–í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞: ${minutes} –º–∏–Ω—É—Ç`);
  console.log('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞:', ctx.user.lastCollection);
  console.log('–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:', now);

  let totalEggs = 0;
  Object.entries(ANIMALS).forEach(([id, animal]) => {
    const count = ctx.user[`${id}_count`];
    const eggs = count * animal.eggsPerMinute * minutes;
    console.log(`${animal.name}: ${count} * ${animal.eggsPerMinute} * ${minutes} = ${eggs.toFixed(2)} —è–∏—Ü`);
    totalEggs += eggs;
  });

  console.log('–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —è–∏—Ü:', totalEggs.toFixed(2));

  if (totalEggs === 0) {
    return ctx.reply('–Ø–π—Ü–∞ –µ—â–µ –Ω–µ —Å–æ–∑—Ä–µ–ª–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 –º–∏–Ω—É—Ç—É', gameKeyboard);
  }

  ctx.user.eggs = parseFloat((ctx.user.eggs + totalEggs).toFixed(2));
  ctx.user.lastCollection = now;
  await ctx.user.save();
  
  console.log(`–°–±–æ—Ä —è–∏—Ü: ${ctx.from.id} —Å–æ–±—Ä–∞–ª ${totalEggs.toFixed(2)} —è–∏—Ü`);
  ctx.replyWithMarkdown(
    `ü•ö *–°–æ–±—Ä–∞–Ω–æ —è–∏—Ü:* ${totalEggs.toFixed(2)}\n` +
    `üí∞ *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —è–∏—Ü:* ${ctx.user.eggs.toFixed(2)}\n` +
    `‚è± *–°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä —á–µ—Ä–µ–∑:* 1 –º–∏–Ω—É—Ç—É`,
    gameKeyboard
  );
});

bot.hears('üí∞ –ü—Ä–æ–¥–∞—Ç—å —è–π—Ü–∞', async (ctx) => {
  ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ "/sell_eggs –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å —è–π—Ü–∞', gameKeyboard);
});

bot.hears('‚ùì –ü–æ–º–æ—â—å', (ctx) => {
  console.log(`–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏: ${ctx.from.id}`);
  const animalsInfo = Object.entries(ANIMALS)
    .map(([_, data]) => 
      `‚ñ´Ô∏è <b>${data.name}</b> - ${data.description}\n   –¶–µ–Ω–∞: ${data.price}üí∞`
    )
    .join('\n');
  
  ctx.reply(
    `<b>üêî –§–µ—Ä–º–∞ –ø–æ–º–æ—â–∏</b>\n\n` +
    `<b>–≠–∫–æ–Ω–æ–º–∏–∫–∞:</b>\n` +
    `ü•ö 1 —è–π—Ü–æ = 0.5üí∞\n\n` +
    `<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ:</b>\n${animalsInfo}\n\n` +
    `<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
    `üëâ –ü—Ä–æ—Ñ–∏–ª—å üë§ - –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ –∂–∏–≤–æ—Ç–Ω—ã–µ\n` +
    `üëâ –ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ üõí - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–µ—Ä–º—ã\n` +
    `üëâ –°–æ–±—Ä–∞—Ç—å —è–π—Ü–∞ ü•ö - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞\n` +
    `üëâ –ü—Ä–æ–¥–∞—Ç—å —è–π—Ü–∞ üí∞ - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –¥–µ–Ω—å–≥–∏`,
    { 
      parse_mode: 'HTML',
      reply_markup: gameKeyboard.reply_markup 
    }
  );
});

bot.command('sell_eggs', async (ctx) => {
  const [amount] = ctx.message.text.split(' ').slice(1);
  const cleanAmount = amount.replace(',', '.');
  const eggsToSell = parseFloat(cleanAmount) || 0;
  
  console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: ${eggsToSell} —è–∏—Ü (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–≤–æ–¥: ${amount})`);
  
  if (eggsToSell <= 0) return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
  if (ctx.user.eggs < eggsToSell) return ctx.reply(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è–∏—Ü. –£ –≤–∞—Å —Ç–æ–ª—å–∫–æ ${ctx.user.eggs.toFixed(2)}ü•ö`);

  const oldEggs = ctx.user.eggs;
  const oldMoney = ctx.user.money;
  
  ctx.user.eggs -= eggsToSell;
  const moneyReceived = eggsToSell * 0.5;
  ctx.user.money = parseFloat((ctx.user.money + moneyReceived).toFixed(2));
  
  console.log('–î–æ –ø—Ä–æ–¥–∞–∂–∏:', { eggs: oldEggs, money: oldMoney });
  console.log('–ü–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏:', { eggs: ctx.user.eggs, money: ctx.user.money });
  console.log(`–ü—Ä–æ–¥–∞–∂–∞: ${ctx.from.id} –ø—Ä–æ–¥–∞–ª ${eggsToSell.toFixed(2)} —è–∏—Ü –∑–∞ ${moneyReceived.toFixed(2)}üí∞`);
  await ctx.user.save();
  
  ctx.reply(
    `–í—ã –ø—Ä–æ–¥–∞–ª–∏ ${eggsToSell.toFixed(2)}ü•ö –∏ –ø–æ–ª—É—á–∏–ª–∏ ${moneyReceived.toFixed(2)}üí∞\n` +
    `–¢–µ–ø–µ—Ä—å —É –≤–∞—Å:\n–Ø–π—Ü–∞: ${ctx.user.eggs.toFixed(2)}ü•ö\n–î–µ–Ω—å–≥–∏: ${ctx.user.money.toFixed(2)}üí∞`,
    gameKeyboard
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
bot.action(/^buy_(\w+)$/, async (ctx) => {
  const animalId = ctx.match[1];
  const animal = ANIMALS[animalId];
  
  if (!animal) return ctx.answerCbQuery('‚ö†Ô∏è –ñ–∏–≤–æ—Ç–Ω–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');

  const maxCount = Math.floor(ctx.user.money / animal.price);
  if (maxCount < 1) {
    return ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
  }

  const buttons = [];
  [1, 10, 50].forEach(num => {
    if (num <= maxCount) {
      buttons.push(Markup.button.callback(num.toString(), `buy:${animalId}:${num}`));
    }
  });
  
  if (maxCount > 1) {
    buttons.push(Markup.button.callback(`MAX (${maxCount})`, `buy:${animalId}:${maxCount}`));
  }

  ctx.editMessageText(
    `–°–∫–æ–ª—å–∫–æ ${animal.name} —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å? (–ú–∞–∫—Å: ${maxCount})`,
    Markup.inlineKeyboard(buttons, { columns: 4 })
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
bot.action(/^buy:(\w+):(\d+)$/, async (ctx) => {
  const animalId = ctx.match[1];
  const count = parseInt(ctx.match[2]);
  const animal = ANIMALS[animalId];
  
  if (!animal || count < 1) {
    return ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞');
  }

  const totalPrice = animal.price * count;
  if (ctx.user.money < totalPrice) {
    return ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
  }

  ctx.user.money = parseFloat((ctx.user.money - totalPrice).toFixed(2));
  ctx.user[`${animalId}_count`] += count;
  await ctx.user.save();
  
  console.log(`–ü–æ–∫—É–ø–∫–∞: ${ctx.from.id} –∫—É–ø–∏–ª ${count} ${animal.name} –∑–∞ ${totalPrice}üí∞`);
  ctx.editMessageText(
    `‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ ${count} ${animal.name} –∑–∞ ${totalPrice}üí∞\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${ctx.user.money.toFixed(2)}üí∞`
  );
  ctx.answerCbQuery();
});

// –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ animals)
User.afterFind(user => {
  if (user && !user[`chicken_count`]) {
    user[`chicken_count`] = 0;
  }
  if (user && !user[`duck_count`]) {
    user[`duck_count`] = 0;
  }
  if (user && !user[`goose_count`]) {
    user[`goose_count`] = 0;
  }
  if (user && !user[`cow_count`]) {
    user[`cow_count`] = 0;
  }
  if (user && !user[`pig_count`]) {
    user[`pig_count`] = 0;
  }
  if (user && !user[`sheep_count`]) {
    user[`sheep_count`] = 0;
  }
});

// –ó–∞–ø—É—Å–∫
(async () => {
  await sequelize.sync({ alter: true });
  bot.launch();
  console.log('–ë–æ—Ç-—Ñ–µ—Ä–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!');
})();

process.once('SIGINT', () => {
  sequelize.close();
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  sequelize.close();
  bot.stop('SIGTERM');
});
