require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { Sequelize, DataTypes } = require('sequelize');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Sequelize –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ SQL
const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: 'database.sqlite',
  logging: false // –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL
});

// –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const User = sequelize.define('User', {
  id: { type: DataTypes.INTEGER, primaryKey: true },
  username: { type: DataTypes.STRING },
  firstName: { type: DataTypes.STRING },
  lastName: { type: DataTypes.STRING },
  eggs: { type: DataTypes.DECIMAL(10, 2), defaultValue: 0.0 },
  money: { type: DataTypes.DECIMAL(10, 2), defaultValue: 100.0 },
  lastCollection: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },
  chicken_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  duck_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  goose_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  cow_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  pig_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  sheep_count: { type: DataTypes.INTEGER, defaultValue: 0 }
});

// –ù–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ –∂–∏–≤–æ—Ç–Ω—ã—Ö (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
const ANIMALS = {
  chicken: {
    name: 'üêî –ö—É—Ä–∏—Ü–∞',
    price: 100,
    eggsPerMinute: 1,
    description: '1 —è–π—Ü–æ/–º–∏–Ω'
  },
  duck: {
    name: 'ü¶Ü –£—Ç–∫–∞',
    price: 500,
    eggsPerMinute: 6.5,
    description: '6.5 —è–∏—Ü/–º–∏–Ω'
  },
  goose: {
    name: 'ü¶¢ –ì—É—Å—å',
    price: 2000,
    eggsPerMinute: 30,
    description: '30 —è–∏—Ü/–º–∏–Ω'
  },
  sheep: {
    name: 'üêë –û–≤—Ü–∞',
    price: 5000,
    eggsPerMinute: 100,
    description: '100 —è–∏—Ü/–º–∏–Ω'
  },
  cow: {
    name: 'üêÑ –ö–æ—Ä–æ–≤–∞',
    price: 25000,
    eggsPerMinute: 650,
    description: '650 —è–∏—Ü/–º–∏–Ω'
  },
  pig: {
    name: 'üêñ –°–≤–∏–Ω—å—è',
    price: 100000,
    eggsPerMinute: 3000,
    description: '3000 —è–∏—Ü/–º–∏–Ω'
  }
};

const bot = new Telegraf(process.env.BOT_TOKEN);

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
const gameKeyboard = Markup.keyboard([
  ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üõí –ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ'],
  ['ü•ö –°–æ–±—Ä–∞—Ç—å —è–π—Ü–∞', 'üí∞ –ü—Ä–æ–¥–∞—Ç—å —è–π—Ü–∞'],
  ['üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ']
]).resize();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π
bot.use(async (ctx, next) => {
  ctx.session ??= { tradeData: {} };
  return next();
});

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const ADMIN_ID = 1126975443;
const isAdmin = (ctx) => ctx.from.id === ADMIN_ID;

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
bot.use(async (ctx, next) => {
  const user = await User.findOrCreate({
    where: { id: ctx.from.id },
    defaults: { 
      id: ctx.from.id,
      username: ctx.from.username,
      firstName: ctx.from.first_name,
      lastName: ctx.from.last_name 
    }
  });
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (user[1]) {
    console.log(`[NEW USER] ID: ${ctx.from.id} (@${ctx.from.username || 'no_username'})`);
  }
  
  await User.update({
    username: ctx.from.username,
    firstName: ctx.from.first_name,
    lastName: ctx.from.last_name
  }, { where: { id: ctx.from.id } });
  
  ctx.user = user[0];
  return next();
});

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.start((ctx) => {
  console.log(`[START] User ${ctx.from.id} (@${ctx.from.username || 'no_username'})`);
  ctx.replyWithMarkdown(
    `üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–µ—Ä–º—É!*\n–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${ctx.user.money.toFixed(2)}üí∞`, 
    gameKeyboard
  )
});

bot.hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å', async (ctx) => {
  console.log(`[PROFILE] User ${ctx.from.id} (@${ctx.from.username || 'no_username'})`);
  const user = ctx.user;
  const list = Object.entries(ANIMALS)
    .map(([id, animal]) => {
      const count = user[`${id}_count`];
      return count > 0 ? `${animal.name} - ${count} —à—Ç.` : '';
    })
    .filter(Boolean)
    .join('\n') || '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö';
  
  ctx.replyWithMarkdown(
    `*üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n` +
    `ü•ö *–Ø–π—Ü–∞:* ${user.eggs.toFixed(2)}\n` +
    `üí∞ *–î–µ–Ω—å–≥–∏:* ${user.money.toFixed(2)}\n` +
    `*–ñ–∏–≤–æ—Ç–Ω—ã–µ:*\n${list}`,
    gameKeyboard
  );
});

bot.hears('üõí –ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ', async (ctx) => {
  console.log(`[SHOP] User ${ctx.from.id} (@${ctx.from.username || 'no_username'})`);
  const sortedAnimals = Object.entries(ANIMALS).sort((a, b) => a[1].price - b[1].price);
  const buttons = sortedAnimals.map(([id, data]) => 
    Markup.button.callback(
      `${data.name} ${data.price}üí∞`,
      `buy_${id}`
    )
  );
  ctx.replyWithMarkdown(
    `*üõí –ú–∞–≥–∞–∑–∏–Ω –∂–∏–≤–æ—Ç–Ω—ã—Ö*\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${ctx.user.money.toFixed(2)}üí∞\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ:`,
    Markup.inlineKeyboard(buttons, { columns: 2 })
  );
});

bot.hears('ü•ö –°–æ–±—Ä–∞—Ç—å —è–π—Ü–∞', async (ctx) => {
  console.log(`[COLLECT] User ${ctx.from.id} (@${ctx.from.username || 'no_username'})`);
  const now = new Date();
  const last = new Date(ctx.user.lastCollection);
  const minutes = Math.max(0, Math.floor((now - last) / 60000));
  
  console.log(`–í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞: ${minutes} –º–∏–Ω—É—Ç`);
  console.log('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞:', ctx.user.lastCollection);
  console.log('–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:', now);

  let totalEggs = 0;
  Object.entries(ANIMALS).forEach(([id, animal]) => {
    const count = ctx.user[`${id}_count`];
    const eggs = count * animal.eggsPerMinute * minutes;
    console.log(`${animal.name}: ${count} * ${animal.eggsPerMinute} * ${minutes} = ${eggs.toFixed(2)} —è–∏—Ü`);
    totalEggs += eggs;
  });

  console.log('–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —è–∏—Ü:', totalEggs.toFixed(2));

  if (totalEggs === 0) {
    return ctx.reply('–Ø–π—Ü–∞ –µ—â–µ –Ω–µ —Å–æ–∑—Ä–µ–ª–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 –º–∏–Ω—É—Ç—É', gameKeyboard);
  }

  ctx.user.eggs = parseFloat((ctx.user.eggs + totalEggs).toFixed(2));
  ctx.user.lastCollection = now;
  await ctx.user.save();
  
  console.log(`–°–±–æ—Ä —è–∏—Ü: ${ctx.from.id} —Å–æ–±—Ä–∞–ª ${totalEggs.toFixed(2)} —è–∏—Ü`);
  ctx.replyWithMarkdown(
    `ü•ö *–°–æ–±—Ä–∞–Ω–æ —è–∏—Ü:* ${totalEggs.toFixed(2)}\n` +
    `üí∞ *–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü:* ${ctx.user.eggs.toFixed(2)}\n`,
    gameKeyboard
  );
});

bot.hears('üí∞ –ü—Ä–æ–¥–∞—Ç—å —è–π—Ü–∞', async (ctx) => {
  console.log(`[SELL] User ${ctx.from.id} (@${ctx.from.username || 'no_username'})`);
  ctx.reply(
    `üí∞ –ü—Ä–æ–¥–∞–∂–∞ —è–∏—Ü\n` +
    `–í–∞—à –±–∞–ª–∞–Ω—Å: ${ctx.user.eggs.toFixed(2)}ü•ö\n` +
    `–ù–∞–ø–∏—à–∏—Ç–µ "/sell_eggs –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å —è–π—Ü–∞`,
    gameKeyboard
  );
});

// –í—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É –ª–∏–¥–µ—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
const handleLeaders = async (ctx) => {
  try {
    const allUsers = await User.findAll({
      order: [['money', 'DESC']],
      attributes: ['id', 'money', 'username', 'firstName', 'lastName']
    });

    const userId = ctx.from.id;
    const userIndex = allUsers.findIndex(u => u.id === userId);
    const userPosition = userIndex >= 0 ? userIndex + 1 : '–ù–µ –≤ —Ç–æ–ø–µ';

    const top10 = allUsers.slice(0, 10).map((u, index) => {
      let name = u.username 
        ? `@${u.username}` 
        : [u.firstName, u.lastName].filter(Boolean).join(' ') 
          || `ID: ${u.id}`;
      
      name = name.replace(/([_*[\]()~`>#+=\-|{}.!])/g, '\\$1');
      
      return `${index + 1}. ${u.id === userId ? 'üëâ ' : ''}${name} - ${u.money.toFixed(2)}üí∞`;
    }).join('\n');

    await ctx.replyWithMarkdown(
      `*üèÜ –¢–æ–ø-10 —Ñ–µ—Ä–º–µ—Ä–æ–≤:*\n\n${top10}\n\n` +
      `*–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:* ${userPosition}\n` +
      `*–í–∞—à –±–∞–ª–∞–Ω—Å:* ${ctx.user.money.toFixed(2)}üí∞`,
      { disable_web_page_preview: true }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–æ–≤:', error);
    ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤');
  }
};

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
bot.hears('üèÜ –õ–∏–¥–µ—Ä—ã', handleLeaders);
bot.action('show_leaders', async (ctx) => {
  console.log(`[LEADERS] User ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤`);
  await ctx.deleteMessage();
  await handleLeaders(ctx);
});

// –í—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É –ø–æ–º–æ—â–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
const handleHelp = (ctx) => {
  const animalsInfo = Object.entries(ANIMALS)
    .map(([_, data]) => 
      `‚ñ´Ô∏è <b>${data.name}</b> - ${data.description}\n   –¶–µ–Ω–∞: ${data.price}üí∞`
    )
    .join('\n');
  
  return ctx.reply(
    `<b>üêî –§–µ—Ä–º–∞ –ø–æ–º–æ—â–∏</b>\n\n` +
    `<b>–≠–∫–æ–Ω–æ–º–∏–∫–∞:</b>\n` +
    `ü•ö 1 —è–π—Ü–æ = 0.5üí∞\n\n` +
    `<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ:</b>\n${animalsInfo}\n\n` +
    `<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
    `üëâ –ü—Ä–æ—Ñ–∏–ª—å üë§ - –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ –∂–∏–≤–æ—Ç–Ω—ã–µ\n` +
    `üëâ –ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ üõí - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–µ—Ä–º—ã\n` +
    `üëâ –°–æ–±—Ä–∞—Ç—å —è–π—Ü–∞ ü•ö - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞\n` +
    `üëâ –ü—Ä–æ–¥–∞—Ç—å —è–π—Ü–∞ üí∞ - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –¥–µ–Ω—å–≥–∏`,
    { 
      parse_mode: 'HTML',
      reply_markup: gameKeyboard.reply_markup 
    }
  );
};

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
bot.hears('‚ùì –ü–æ–º–æ—â—å', handleHelp);

bot.action('show_help', async (ctx) => {
  console.log(`[HELP] User ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É`);
  await ctx.deleteMessage();
  await handleHelp(ctx);
});

bot.command('trade', async (ctx) => {
  console.log(`[TRADE_ATTEMPT] User ${ctx.from.id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏`);
  const [targetUsername, amountStr] = ctx.message.text.split(' ').slice(1);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  if (!targetUsername || !amountStr) {
    return ctx.replyWithMarkdown(
      `‚ùå *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:*\n` +
      `/trade @–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º–∞\n` +
      `–ü—Ä–∏–º–µ—Ä: /trade @username 100`
    );
  }

  // –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
  const amount = parseFloat(amountStr.replace(',', '.'));
  if (isNaN(amount) || amount <= 0) {
    return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –±–æ–ª—å—à–µ –Ω—É–ª—è');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
  const cleanUsername = targetUsername.replace('@', '');
  const receiver = await User.findOne({ 
    where: { username: cleanUsername } 
  });

  if (!receiver) {
    return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  if (receiver.id === ctx.user.id) {
    return ctx.reply('‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  if (ctx.user.money < amount) {
    return ctx.reply(
      `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${ctx.user.money.toFixed(2)}üí∞`
    );
  }

  try {
    // –°–æ–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    ctx.user.money -= amount;
    receiver.money += amount;

    await Promise.all([ctx.user.save(), receiver.save()]);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    ctx.replyWithMarkdown(
      `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ *${amount.toFixed(2)}üí∞* ` +
      `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${receiver.username}`
    );

    ctx.telegram.sendMessage(
      receiver.id,
      `üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ *${amount.toFixed(2)}üí∞* ` +
      `–æ—Ç @${ctx.user.username || ctx.user.first_name}`,
      { parse_mode: 'Markdown' }
    );

    console.log(`[TRADE_SUCCESS] User ${ctx.from.id} –ø–µ—Ä–µ–¥–∞–ª ${amount}üí∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${receiver.id}`);

  } catch (error) {
    console.error(`[TRADE_FAIL] User ${ctx.from.id}: ${error.message}`);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
  }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ animals)
User.afterFind(user => {
  if (user && !user[`chicken_count`]) {
    user[`chicken_count`] = 0;
  }
  if (user && !user[`duck_count`]) {
    user[`duck_count`] = 0;
  }
  if (user && !user[`goose_count`]) {
    user[`goose_count`] = 0;
  }
  if (user && !user[`cow_count`]) {
    user[`cow_count`] = 0;
  }
  if (user && !user[`pig_count`]) {
    user[`pig_count`] = 0;
  }
  if (user && !user[`sheep_count`]) {
    user[`sheep_count`] = 0;
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥
bot.command('add_money', async (ctx) => {
  console.log(`[ADMIN] add_money by ${ctx.from.id} (@${ctx.from.username || 'no_username'})`);
  if (!isAdmin(ctx)) return;
  
  const [userId, amount] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  user.money += parseFloat(amount);
  await user.save();
  ctx.reply(`‚úÖ ${user.id} –ø–æ–ª—É—á–µ–Ω–æ ${amount}üí∞`);
  ctx.telegram.sendMessage(userId, `–ü–æ–ª—É—á–µ–Ω–æ ${amount}üí∞ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.money.toFixed(2)}üí∞`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è–∏—Ü
bot.command('add_eggs', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, amount] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  user.eggs += parseFloat(amount);
  await user.save();
  ctx.reply(`‚úÖ ${user.id} –ø–æ–ª—É—á–µ–Ω–æ ${amount}ü•ö`);
  ctx.telegram.sendMessage(userId, `–ü–æ–ª—É—á–µ–Ω–æ ${amount}ü•ö –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.eggs.toFixed(2)}ü•ö`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
bot.command('add_animal', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, animalId, count] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  if (!ANIMALS[animalId]) return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ');
  
  const field = `${animalId}_count`;
  user[field] += parseInt(count);
  await user.save();
  ctx.reply(`‚úÖ ${user.id} –ø–æ–ª—É—á–µ–Ω–æ ${count} ${ANIMALS[animalId].name}`);
  ctx.telegram.sendMessage(userId, `–ü–æ–ª—É—á–µ–Ω–æ ${count} ${ANIMALS[animalId].name} –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: ${user[field]}`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–Ω–µ–≥
bot.command('set_money', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, amount] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  user.money = parseFloat(amount);
  await user.save();
  ctx.reply(`‚úÖ –î–ª—è ${user.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${amount}üí∞`);
  ctx.telegram.sendMessage(userId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å: ${amount}üí∞`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∏—Ü
bot.command('set_eggs', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, amount] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  user.eggs = parseFloat(amount);
  await user.save();
  ctx.reply(`‚úÖ –î–ª—è ${user.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${amount}ü•ö`);
  ctx.telegram.sendMessage(userId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏–ª —è–π—Ü–∞: ${amount}ü•ö`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥
bot.command('delete_money', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, amount] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  user.money = Math.max(0, user.money - parseFloat(amount));
  await user.save();
  ctx.reply(`‚úÖ –£ ${user.id} —Å–ø–∏—Å–∞–Ω–æ ${amount}üí∞`);
  ctx.telegram.sendMessage(userId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∞–ª: ${amount}üí∞\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.money.toFixed(2)}üí∞`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è —è–∏—Ü
bot.command('delete_eggs', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, amount] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  user.eggs = Math.max(0, user.eggs - parseFloat(amount));
  await user.save();
  ctx.reply(`‚úÖ –£ ${user.id} —Å–ø–∏—Å–∞–Ω–æ ${amount}ü•ö`);
  ctx.telegram.sendMessage(userId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∞–ª: ${amount}ü•ö\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.eggs.toFixed(2)}ü•ö`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö
bot.command('set_animal', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, animalId, count] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  if (!ANIMALS[animalId]) return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ');
  
  const field = `${animalId}_count`;
  user[field] = Math.max(0, parseInt(count));
  await user.save();
  ctx.reply(`‚úÖ –î–ª—è ${user.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${count} ${ANIMALS[animalId].name}`);
  ctx.telegram.sendMessage(userId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏–ª: ${count} ${ANIMALS[animalId].name}`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
bot.command('delete_animal', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, animalId, count] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  if (!ANIMALS[animalId]) return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ');
  
  const field = `${animalId}_count`;
  user[field] = Math.max(0, user[field] - parseInt(count));
  await user.save();
  ctx.reply(`‚úÖ –£ ${user.id} —Å–ø–∏—Å–∞–Ω–æ ${count} ${ANIMALS[animalId].name}`);
  ctx.telegram.sendMessage(userId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∞–ª: ${count} ${ANIMALS[animalId].name}\n–û—Å—Ç–∞–ª–æ—Å—å: ${user[field]}`);
});

// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–¥–∞–∂–∏ —è–∏—Ü
bot.command('sell_eggs', async (ctx) => {
  const [amount] = ctx.message.text.split(' ').slice(1);
  
  if (!amount) {
    return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏\n–ü—Ä–∏–º–µ—Ä: /sell_eggs 10');
  }

  const user = ctx.user;
  const eggsToSell = parseFloat(amount);
  
  if (eggsToSell > user.eggs) {
    return ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è–∏—Ü –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏');
  }

  const moneyEarned = eggsToSell * 0.5;
  user.eggs -= eggsToSell;
  user.money += moneyEarned;
  await user.save();
  
  ctx.reply(`‚úÖ –í—ã –ø—Ä–æ–¥–∞–ª–∏ ${eggsToSell} —è–∏—Ü –∑–∞ ${moneyEarned.toFixed(2)}üí∞`);
});

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
bot.action(/^buy_(\w+)$/, async (ctx) => {
  const animalId = ctx.match[1];
  const animal = ANIMALS[animalId];
  
  if (!animal) return ctx.answerCbQuery('‚ö†Ô∏è –ñ–∏–≤–æ—Ç–Ω–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');

  const maxCount = Math.floor(ctx.user.money / animal.price);
  if (maxCount < 1) {
    return ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
  }

  const buttons = [];
  [1, 5, 10].forEach(num => { // –ò–∑–º–µ–Ω–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if (num <= maxCount) {
      buttons.push(Markup.button.callback(num.toString(), `buy:${animalId}:${num}`));
    }
  });
  
  if (maxCount > 1) {
    buttons.push(Markup.button.callback(`MAX (${maxCount})`, `buy:${animalId}:${maxCount}`));
  }

  await ctx.editMessageText( // –î–æ–±–∞–≤–ª–µ–Ω await
    `–°–∫–æ–ª—å–∫–æ ${animal.name} —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å? (–ú–∞–∫—Å: ${maxCount})`,
    Markup.inlineKeyboard(buttons, { columns: 4 })
  );
});

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
bot.action(/^buy:(\w+):(\d+)$/, async (ctx) => {
  const animalId = ctx.match[1];
  const count = parseInt(ctx.match[2]);
  const animal = ANIMALS[animalId];
  
  if (!animal || count < 1) {
    return ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞');
  }

  const totalPrice = animal.price * count;
  if (ctx.user.money < totalPrice) {
    return ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
  }

  ctx.user.money = parseFloat((ctx.user.money - totalPrice).toFixed(2));
  ctx.user[`${animalId}_count`] += count;
  await ctx.user.save(); // –î–æ–±–∞–≤–ª–µ–Ω await
  
  ctx.editMessageText(
    `‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ ${count} ${animal.name} –∑–∞ ${totalPrice}üí∞\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${ctx.user.money.toFixed(2)}üí∞`
  );
  ctx.answerCbQuery();
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"
bot.hears('üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', (ctx) => {
  console.log(`[MENU] User ${ctx.from.id} –æ—Ç–∫—Ä—ã–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏`);
  ctx.reply(
    'üìÇ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:',
    Markup.inlineKeyboard([
      Markup.button.callback('üèÜ –õ–∏–¥–µ—Ä—ã', 'show_leaders'),
      Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'show_help'),
      Markup.button.callback('üîÑ –û–±–º–µ–Ω', 'show_trade_help')
    ], { columns: 2 })
  );
});

bot.action('show_trade_help', async (ctx) => {
  console.log(`[TRADE_HELP] User ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å –ø–æ –æ–±–º–µ–Ω—É`);
  await ctx.deleteMessage();
  ctx.replyWithMarkdown(
    `*üîÑ –°–∏—Å—Ç–µ–º–∞ –æ–±–º–µ–Ω–∞*\n` +
    `–í–∞—à –±–∞–ª–∞–Ω—Å: ${ctx.user.money.toFixed(2)}üí∞\n\n` +
    `–î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–µ–Ω–µ–≥ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É:\n` +
    `–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É */trade @–∏–º—è_–∏–≥—Ä–æ–∫–∞ —Å—É–º–º–∞*\n` +
    `\n` +
    `–ù–∞–ø—Ä–∏–º–µ—Ä: */trade @username 500*\n\n` +
    `‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n` +
    `- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1üí∞\n`
  );
});

bot.launch();
