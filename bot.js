require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { Sequelize, DataTypes } = require('sequelize');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Sequelize –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ SQL
const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: 'database.sqlite',
  logging: false // –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL
});

// –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const User = sequelize.define('User', {
  id: { type: DataTypes.INTEGER, primaryKey: true },
  username: { type: DataTypes.STRING },
  firstName: { type: DataTypes.STRING },
  lastName: { type: DataTypes.STRING },
  eggs: { type: DataTypes.DECIMAL(10, 2), defaultValue: 0.0 },
  money: { type: DataTypes.DECIMAL(10, 2), defaultValue: 100.0 },
  lastCollection: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },
  chicken_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  incubator_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  duck_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  aviary_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  goose_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  cow_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  pig_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  sheep_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  milk: { type: DataTypes.DECIMAL(10, 2), defaultValue: 0.0 },       // –ú–æ–ª–æ–∫–æ –æ—Ç –∫–æ—Ä–æ–≤
  meat: { type: DataTypes.DECIMAL(10, 2), defaultValue: 0.0 },       // –ú—è—Å–æ –æ—Ç —Å–≤–∏–Ω–µ–π
  wool: { type: DataTypes.DECIMAL(10, 2), defaultValue: 0.0 },       // –®–µ—Ä—Å—Ç—å –æ—Ç –æ–≤–µ—Ü
  feathers: { type: DataTypes.DECIMAL(10, 2), defaultValue: 0.0 },    // –ü–µ—Ä—å—è –æ—Ç —É—Ç–æ–∫
  down: { type: DataTypes.DECIMAL(10, 2), defaultValue: 0.0 },      // –ü—É—Ö –æ—Ç –≥—É—Å–µ–π
  lastDailyBonus: { type: DataTypes.DATE, defaultValue: null },
  egg_robot_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  egg_factory_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  egg_3d_printer_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  feather_drone_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  feather_nano_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  feather_matrix_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  down_cloud_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  down_quantum_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  down_blackhole_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  wool_ai_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  wool_reactor_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  wool_galaxy_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  milk_asteroid_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  milk_quantum_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  milk_singularity_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  meat_hologram_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  meat_portal_count: { type: DataTypes.INTEGER, defaultValue: 0 },
  meat_bigbang_count: { type: DataTypes.INTEGER, defaultValue: 0 }
}, {
  tableName: 'Users',
  timestamps: true,
  createdAt: true,
  updatedAt: false  // ‚Üê –û—Ç–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ updatedAt
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É ANIMAL_CATEGORIES
const ANIMAL_CATEGORIES = {
  eggs: {
    name: 'ü•ö –Ø–π—Ü–∞',
    producers: [
      {
        id: 'chicken',
        name: 'üêî –ö—É—Ä–∏—Ü–∞',
        basePrice: 50,
        production: 1,
        description: '1 ü•ö/–º–∏–Ω'
      },
      {
        id: 'incubator',
        name: 'üè≠ –ò–Ω–∫—É–±–∞—Ç–æ—Ä',
        basePrice: 500,
        production: 15,
        description: '15 ü•ö/–º–∏–Ω'
      },
      {
        id: 'egg_robot',
        name: 'ü§ñ –Ø–π—Ü–µ—Ä–æ–±–æ—Ç',
        basePrice: 2500,
        production: 50,
        description: '50 ü•ö/–º–∏–Ω'
      },
      {
        id: 'egg_factory',
        name: 'üè≠ –Ø–∏—á–Ω—ã–π –∫–æ–º–±–∏–Ω–∞—Ç',
        basePrice: 10000,
        production: 200,
        description: '200 ü•ö/–º–∏–Ω'
      },
      {
        id: 'egg_3d_printer',
        name: 'üñ® 3D –ü—Ä–∏–Ω—Ç–µ—Ä —è–∏—Ü',
        basePrice: 50000,
        production: 1000,
        description: '1000 ü•ö/–º–∏–Ω'
      }
    ]
  },
  feathers: {
    name: 'ü™∂ –ü–µ—Ä—å—è',
    producers: [
      {
        id: 'duck',
        name: 'ü¶Ü –£—Ç–∫–∞',
        basePrice: 100,
        production: 1,
        description: '1 ü™∂/–º–∏–Ω'
      },
      {
        id: 'aviary',
        name: 'üè≠ –ü—Ç–∏—á–Ω–∏–∫',
        basePrice: 1200,
        production: 20,
        description: '20 ü™∂/–º–∏–Ω'
      },
      {
        id: 'feather_drone',
        name: 'üöÅ –ü–µ—Ä—å–µ–¥—ã—Ä',
        basePrice: 6000,
        production: 100,
        description: '100 ü™∂/–º–∏–Ω'
      },
      {
        id: 'feather_nano',
        name: '‚öõ –ù–∞–Ω–æ-–ø–µ—Ä—å—è',
        basePrice: 30000,
        production: 500,
        description: '500 ü™∂/–º–∏–Ω'
      },
      {
        id: 'feather_matrix',
        name: 'üßø –ú–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä—å–µ–≤',
        basePrice: 150000,
        production: 2500,
        description: '2500 ü™∂/–º–∏–Ω'
      }
    ]
  },
  down: {
    name: 'üõå –ü—É—Ö',
    producers: [
      {
        id: 'goose',
        name: 'ü¶¢ –ì—É—Å—å',
        basePrice: 200,
        production: 1,
        description: '1 üõå/–º–∏–Ω'
      },
      {
        id: 'down_farm',
        name: 'üè≠ –ü—É—Ö–æ–≤–∞—è —Ñ–µ—Ä–º–∞',
        basePrice: 2500,
        production: 25,
        description: '25 üõå/–º–∏–Ω'
      },
      {
        id: 'down_cloud',
        name: '‚òÅ –ü—É—Ö–æ–≤–æ–µ –æ–±–ª–∞–∫–æ',
        basePrice: 15000,
        production: 150,
        description: '150 üõå/–º–∏–Ω'
      },
      {
        id: 'down_quantum',
        name: '‚öõ –ö–≤–∞–Ω—Ç–æ–≤—ã–π –ø—É—Ö',
        basePrice: 75000,
        production: 800,
        description: '800 üõå/–º–∏–Ω'
      },
      {
        id: 'down_blackhole',
        name: 'üï≥ –ü—É—Ö–æ–≤–∞—è —á–µ—Ä–Ω–∞—è –¥—ã—Ä–∞',
        basePrice: 300000,
        production: 4000,
        description: '4000 üõå/–º–∏–Ω'
      }
    ]
  },
  wool: {
    name: 'üß∂ –®–µ—Ä—Å—Ç—å',
    producers: [
      {
        id: 'sheep',
        name: 'üêë –û–≤—Ü–∞',
        basePrice: 300,
        production: 1,
        description: '1 üß∂/–º–∏–Ω'
      },
      {
        id: 'wool_factory',
        name: 'üè≠ –®–µ—Ä—Å—Ç—è–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞',
        basePrice: 3500,
        production: 30,
        description: '30 üß∂/–º–∏–Ω'
      },
      {
        id: 'wool_ai',
        name: 'üß† –ò–ò-–ü—Ä—è–¥–∏–ª—å—â–∏–∫',
        basePrice: 20000,
        production: 200,
        description: '200 üß∂/–º–∏–Ω'
      },
      {
        id: 'wool_reactor',
        name: '‚ò¢ –®–µ—Ä—Å—Ç—è–Ω–æ–π —Ä–µ–∞–∫—Ç–æ—Ä',
        basePrice: 100000,
        production: 1200,
        description: '1200 üß∂/–º–∏–Ω'
      },
      {
        id: 'wool_galaxy',
        name: 'üåå –ì–∞–ª–∞–∫—Ç–∏–∫–∞ —à–µ—Ä—Å—Ç–∏',
        basePrice: 500000,
        production: 10000,
        description: '10000 üß∂/–º–∏–Ω'
      }
    ]
  },
  milk: {
    name: 'ü•õ –ú–æ–ª–æ–∫–æ',
    producers: [
      {
        id: 'cow',
        name: 'üêÑ –ö–æ—Ä–æ–≤–∞',
        basePrice: 400,
        production: 1,
        description: '1 ü•õ/–º–∏–Ω'
      },
      {
        id: 'dairy_plant',
        name: 'üè≠ –ú–æ–ª–æ—á–Ω—ã–π –∑–∞–≤–æ–¥',
        basePrice: 5000,
        production: 40,
        description: '40 ü•õ/–º–∏–Ω'
      },
      {
        id: 'milk_asteroid',
        name: '‚òÑ –ú–æ–ª–æ—á–Ω—ã–π –∞—Å—Ç–µ—Ä–æ–∏–¥',
        basePrice: 30000,
        production: 300,
        description: '300 ü•õ/–º–∏–Ω'
      },
      {
        id: 'milk_quantum',
        name: '‚öõ –ö–≤–∞–Ω—Ç–æ–≤–∞—è –¥–æ–π–∫–∞',
        basePrice: 150000,
        production: 2000,
        description: '2000 ü•õ/–º–∏–Ω'
      },
      {
        id: 'milk_singularity',
        name: 'üåÄ –ú–æ–ª–æ—á–Ω–∞—è —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å',
        basePrice: 750000,
        production: 15000,
        description: '15000 ü•õ/–º–∏–Ω'
      }
    ]
  },
  meat: {
    name: 'ü•© –ú—è—Å–æ',
    producers: [
      {
        id: 'pig',
        name: 'üêñ –°–≤–∏–Ω—å—è',
        basePrice: 600,
        production: 1,
        description: '1 ü•©/–º–∏–Ω'
      },
      {
        id: 'meat_combine',
        name: 'üè≠ –ú—è—Å–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ç',
        basePrice: 7500,
        production: 50,
        description: '50 ü•©/–º–∏–Ω'
      },
      {
        id: 'meat_hologram',
        name: 'üëΩ –ì–æ–ª–æ–≥—Ä–∞–º–º—è—Ç–∏–Ω–∞',
        basePrice: 50000,
        production: 400,
        description: '400 ü•©/–º–∏–Ω'
      },
      {
        id: 'meat_portal',
        name: 'üåÄ –ú—è—Å–Ω–æ–π –ø–æ—Ä—Ç–∞–ª',
        basePrice: 250000,
        production: 3000,
        description: '3000 ü•©/–º–∏–Ω'
      },
      {
        id: 'meat_bigbang',
        name: 'üí• –ú—è—Å–Ω–æ–π –ë–æ–ª—å—à–æ–π –í–∑—Ä—ã–≤',
        basePrice: 1000000,
        production: 25000,
        description: '25000 ü•©/–º–∏–Ω'
      }
    ]
  }
};

// –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã
const RESOURCE_PRICES = {
  eggs: 0.1,     // –ë–∞–∑–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å
  feathers: 0.5, // –†–µ–¥–∫–∏–µ –ø–µ—Ä—å—è
  down: 1.2,     // –¶–µ–Ω–Ω—ã–π –ø—É—Ö
  wool: 2.0,     // –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —à–µ—Ä—Å—Ç—å
  milk: 3.5,     // –ü—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ
  meat: 5.0      // –≠–ª–∏—Ç–Ω–æ–µ –º—è—Å–æ
};

// –î–æ–±–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
const RESOURCE_TYPES = Object.keys(RESOURCE_PRICES);
const PRODUCER_TYPES = Object.values(ANIMAL_CATEGORIES)
  .flatMap(cat => cat.producers.map(p => p.id));

// –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞
(async () => {
  await sequelize.sync({ force: false });
  console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
})();

const bot = new Telegraf(process.env.TEST_BOT_TOKEN);

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
const getMainKeyboard = (user) => {
  const bonusAvailable = checkBonusAvailability(user);
  
  return Markup.keyboard([
    ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üõí –ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ'],
    ['üì¶ –°–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã', 'üí∞ –ü—Ä–æ–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã'],
    bonusAvailable 
      ? ['üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', 'üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ']
      : ['üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ']
  ]).resize();
};

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ–Ω—É—Å–∞
const checkBonusAvailability = (user) => {
  if (!user.lastDailyBonus) return true;
  const now = new Date();
  const lastBonus = new Date(user.lastDailyBonus);
  const hoursDiff = Math.floor((now - lastBonus) / (1000 * 60 * 60));
  return hoursDiff >= 24;
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π
bot.use(async (ctx, next) => {
  ctx.session ??= { tradeData: {} };
  return next();
});

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const isAdmin = (ctx) => {
  return ctx.from && ctx.from.id === 1126975443; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
};

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.use(async (ctx, next) => {
  const [user, created] = await User.findOrCreate({
    where: { id: ctx.from.id },
    defaults: {
      username: ctx.from.username,
      firstName: ctx.from.first_name,
      lastName: ctx.from.last_name
    }
  });

  if (created) {
    const adminId = 1126975443; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    const userInfo = [
      `üÜï *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω*`,
      `‚îú ID: \`${user.id}\``,
      `‚îú –Æ–∑–µ—Ä–Ω–µ–π–º: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`,
      `‚îú –ò–º—è: ${user.firstName}${user.lastName ? ' ' + user.lastName : ''}`,
      `‚îî –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`
    ].join('\n');

    try {
      await ctx.telegram.sendMessage(
        adminId,
        userInfo,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      console.error('[ADMIN_NOTIFY_ERROR]', error.message);
    }
  }

  ctx.user = user;
  return next();
});

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.start((ctx) => {
  console.log(`[START] User ${ctx.from.id} (@${ctx.from.username || 'no_username'})`);
  ctx.replyWithMarkdown(
    `üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–µ—Ä–º—É!*\n–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${ctx.user.money.toFixed(2)}üí∞`, 
    getMainKeyboard(ctx.user)
  )
});

bot.hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å', async (ctx) => {
  const user = ctx.user;
  let totalPerMinute = 0;
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
  const allProducers = Object.values(ANIMAL_CATEGORIES)
    .flatMap(cat => cat.producers.map(p => ({ ...p, category: cat.name })));
  
  const animalsList = allProducers
    .map(producer => {
      const count = user[`${producer.id}_count`];
      const production = getAnimalProduction(user, producer.id) * count;
      totalPerMinute += production;
      const categoryMap = {
        'ü•ö –Ø–π—Ü–∞': 'eggs',
        'ü™∂ –ü–µ—Ä—å—è': 'feathers',
        'üõå –ü—É—Ö': 'down',
        'üß∂ –®–µ—Ä—Å—Ç—å': 'wool',
        'ü•õ –ú–æ–ª–æ–∫–æ': 'milk',
        'ü•© –ú—è—Å–æ': 'meat'
      };
      const emoji = {
        eggs: 'ü•ö', feathers: 'ü™∂', down: 'üõå',
        wool: 'üß∂', milk: 'ü•õ', meat: 'ü•©'
      }[categoryMap[producer.category]];
      
      return count > 0 
        ? `${producer.name} ${count}—à—Ç. (${Math.round(production)}${emoji}/–º–∏–Ω)`
        : '';
    })
    .filter(Boolean)
    .join('\n') || '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö';

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ —Ü–µ–Ω–µ
  const sortedResources = Object.entries(RESOURCE_PRICES)
    .sort((a, b) => Object.keys(RESOURCE_PRICES).indexOf(a[0]) - Object.keys(RESOURCE_PRICES).indexOf(b[0]))
    .map(([res]) => res);

  ctx.replyWithMarkdown(
    `*üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n` +
    `${sortedResources.map(res => {
      const emoji = {
        eggs: 'ü•ö', feathers: 'ü™∂', down: 'üõå',
        wool: 'üß∂', milk: 'ü•õ', meat: 'ü•©'
      }[res];
      return `${emoji} ${getResourceName(res)}: ${user[res].toFixed(2)}`;
    }).join('\n')}\n\n` +
    `üí∞ –î–µ–Ω—å–≥–∏: ${user.money.toFixed(2)}\n` +
    `*–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:*\n${animalsList}`,
    getMainKeyboard(user)
  );
});

bot.hears('üõí –ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ', async (ctx) => {
  const buttons = Object.entries(ANIMAL_CATEGORIES).map(([id, category]) => 
    Markup.button.callback(category.name, `buy_category_${id}`)
  );
  
  ctx.replyWithMarkdown(
    'üè≠ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:*',
    Markup.inlineKeyboard(buttons, { columns: 2 })
  );
});

bot.hears('üì¶ –°–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã', async (ctx) => {
  const now = new Date();
  const last = new Date(ctx.user.lastCollection);
  const seconds = Math.max(0, Math.floor((now - last) / 1000));
  
  const resources = {
    eggs: 0,
    milk: 0,
    meat: 0,
    wool: 0,
    feathers: 0,
    down: 0
  };

  Object.entries(ANIMAL_CATEGORIES).forEach(([resource, category]) => {
    category.producers.forEach(animal => {
      const count = ctx.user[`${animal.id}_count`];
      let production = 0;
      
      for(let i = 0; i < count; i++) {
        production += animal.production;
      }
      
      const amount = production * (seconds / 60); // –°—á–∏—Ç–∞–µ–º –≤ –º–∏–Ω—É—Ç–∞—Ö —Å –¥—Ä–æ–±—è–º–∏
      resources[resource] += amount;
    });
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
  ctx.user.eggs = parseFloat((ctx.user.eggs + resources.eggs).toFixed(2));
  ctx.user.milk = parseFloat((ctx.user.milk + resources.milk).toFixed(2));
  ctx.user.meat = parseFloat((ctx.user.meat + resources.meat).toFixed(2));
  ctx.user.wool = parseFloat((ctx.user.wool + resources.wool).toFixed(2));
  ctx.user.feathers = parseFloat((ctx.user.feathers + resources.feathers).toFixed(2));
  ctx.user.down = parseFloat((ctx.user.down + resources.down).toFixed(2));
  
  ctx.user.lastCollection = now;
  await ctx.user.save();

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã
  const orderedResources = Object.entries(resources)
    .filter(([_, value]) => value > 0)
    .sort((a, b) => Object.keys(RESOURCE_PRICES).indexOf(a[0]) - Object.keys(RESOURCE_PRICES).indexOf(b[0]));
  
  const resourcesList = orderedResources
    .map(([res, value]) => {
      const emoji = {
        eggs: 'ü•ö', feathers: 'ü™∂', down: 'üõå',
        wool: 'üß∂', milk: 'ü•õ', meat: 'ü•©'
      }[res];
      return `${emoji} ${getResourceName(res)}: ${value.toFixed(2)}`;
    })
    .join('\n');

  ctx.replyWithMarkdown(
    `üì¶ *–°–æ–±—Ä–∞–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞ ${(seconds/60).toFixed(1)} –º–∏–Ω—É—Ç:*\n` +
    (resourcesList || '‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤'),
    Markup.inlineKeyboard([
      Markup.button.callback('üí∞ –ü—Ä–æ–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã', 'open_sell_menu')
    ])
  );
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã"
bot.action('open_sell_menu', async (ctx) => {
  await ctx.deleteMessage();
  
  ctx.replyWithMarkdown(
    `üí∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:*\n` +
    `–¶–µ–Ω—ã –∑–∞ 1 –µ–¥.:\n` +
    `ü•ö –Ø–π—Ü–∞: ${RESOURCE_PRICES.eggs}üí∞\n` +
    `ü™∂ –ü–µ—Ä—å—è: ${RESOURCE_PRICES.feathers}üí∞\n` +
    `üõå –ü—É—Ö: ${RESOURCE_PRICES.down}üí∞\n` +
    `üß∂ –®–µ—Ä—Å—Ç—å: ${RESOURCE_PRICES.wool}üí∞\n` +
    `ü•õ –ú–æ–ª–æ–∫–æ: ${RESOURCE_PRICES.milk}üí∞\n` +
    `ü•© –ú—è—Å–æ: ${RESOURCE_PRICES.meat}üí∞`,
    Markup.inlineKeyboard([
      Markup.button.callback('ü•ö –Ø–π—Ü–∞', 'sell_eggs'),
      Markup.button.callback('ü™∂ –ü–µ—Ä—å—è', 'sell_feathers'),
      Markup.button.callback('üõå –ü—É—Ö', 'sell_down'),
      Markup.button.callback('üß∂ –®–µ—Ä—Å—Ç—å', 'sell_wool'),
      Markup.button.callback('ü•õ –ú–æ–ª–æ–∫–æ', 'sell_milk'),
      Markup.button.callback('ü•© –ú—è—Å–æ', 'sell_meat'),
      Markup.button.callback('üí• –ü—Ä–æ–¥–∞—Ç—å –í–°–Å', 'sell_all')
    ], { columns: 3 })
  );
});

// –í—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É –ª–∏–¥–µ—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
const handleLeaders = async (ctx) => {
  try {
    const allUsers = await User.findAll({
      order: [['money', 'DESC']],
      attributes: ['id', 'money', 'username', 'firstName', 'lastName']
    });

    const userId = ctx.from.id;
    const userIndex = allUsers.findIndex(u => u.id === userId);
    const userPosition = userIndex >= 0 ? userIndex + 1 : '–ù–µ –≤ —Ç–æ–ø–µ';

    const top10 = allUsers.slice(0, 10).map((u, index) => {
      let name = u.username 
        ? `@${u.username}` 
        : [u.firstName, u.lastName].filter(Boolean).join(' ') 
          || `ID: ${u.id}`;
      
      name = name.replace(/([_*[\]()~`>#+=\-|{}.!])/g, '\\$1');
      
      return `${index + 1}. ${u.id === userId ? 'üëâ ' : ''}${name} - ${u.money.toFixed(2)}üí∞`;
    }).join('\n');

    await ctx.replyWithMarkdown(
      `*üèÜ –¢–æ–ø-10 —Ñ–µ—Ä–º–µ—Ä–æ–≤:*\n\n${top10}\n\n` +
      `*–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:* ${userPosition}\n` +
      `*–í–∞—à –±–∞–ª–∞–Ω—Å:* ${ctx.user.money.toFixed(2)}üí∞`,
      { disable_web_page_preview: true }
    );
  } catch (error) {
    console.error(`[LEADERS_ERROR] User ${ctx.from.id} (@${ctx.from.username || 'no_username'}):`, error);
    ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤');
  }
};

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
bot.hears('üèÜ –õ–∏–¥–µ—Ä—ã', handleLeaders);
bot.action('show_leaders', async (ctx) => {
  console.log(`[LEADERS] User ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤`);
  await ctx.deleteMessage();
  await handleLeaders(ctx);
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤
bot.action('show_help', async (ctx) => {
  await ctx.deleteMessage();
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤
  const productionList = Object.values(ANIMAL_CATEGORIES)
    .map(category => {
      const producersList = category.producers
        .map(producer => 
          `‚ñ´Ô∏è ${producer.name} - ${producer.description} (–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${producer.basePrice}üí∞)`
        )
        .join('\n');
      return `*${category.name}*\n${producersList}`;
    })
    .join('\n\n');

  ctx.replyWithMarkdown(
    `*üè≠ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤*\n\n${productionList}\n\n` +
    `- –¶–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç –Ω–∞ 10% –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É\n\n` +
    `*–°–∏—Å—Ç–µ–º–∞ –æ–±–º–µ–Ω–∞*\n` +
    `–î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–µ–Ω–µ–≥ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É:\n` +
    `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É */trade @–∏–º—è_–∏–≥—Ä–æ–∫–∞ —Å—É–º–º–∞*\n` +
    `–ü—Ä–∏–º–µ—Ä: */trade @username 500*\n` +
    `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1üí∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: 1,000,000üí∞`
  );
});

bot.command('trade', async (ctx) => {
  console.log(`[TRADE_ATTEMPT] User ${ctx.from.id} (@${ctx.from.username || 'no_username'}) –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
  if (ctx.message.text.split(' ').length < 3) {
    return ctx.replyWithMarkdown(
      '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!*\n' +
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/trade @username —Å—É–º–º–∞`\n' +
      '–ü—Ä–∏–º–µ—Ä: `/trade @user123 500`'
    );
  }

  const [targetUsername, amountStr] = ctx.message.text.split(' ').slice(1);
  
  // –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
  const amount = parseFloat(amountStr.replace(',', '.'));
  if (isNaN(amount) || amount < 1) {
    return ctx.replyWithMarkdown(
      '‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞!*\n' +
      '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: `1üí∞`\n' +
      '–ü—Ä–∏–º–µ—Ä: `/trade @user123 100`'
    );
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
  const cleanUsername = targetUsername.replace('@', '');
  if (!cleanUsername.match(/^[a-zA-Z0-9_]{5,32}$/)) {
    return ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  const receiver = await User.findOne({ 
    where: { username: cleanUsername } 
  });

  if (!receiver) {
    return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  if (receiver.id === ctx.user.id) {
    return ctx.reply('‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  if (ctx.user.money < amount) {
    return ctx.reply(
      `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${ctx.user.money.toFixed(2)}üí∞`
    );
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
  if (amount > 1_000_000) {
    return ctx.reply('‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: 1,000,000üí∞');
  }

  try {
    // –°–æ–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    ctx.user.money -= amount;
    receiver.money += amount;

    await Promise.all([ctx.user.save(), receiver.save()]);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    ctx.replyWithMarkdown(
      `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ *${amount.toFixed(2)}üí∞* ` +
      `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${receiver.username}`
    );

    ctx.telegram.sendMessage(
      receiver.id,
      `üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ *${amount.toFixed(2)}üí∞* ` +
      `–æ—Ç @${ctx.user.username || ctx.user.first_name}`,
      { parse_mode: 'Markdown' }
    );

    console.log(`[TRADE_SUCCESS] User ${ctx.from.id} (@${ctx.from.username || 'no_username'}) –ø–µ—Ä–µ–¥–∞–ª ${amount}üí∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${receiver.id}`);

  } catch (error) {
    console.error(`[TRADE_ERROR] User ${ctx.from.id} (@${ctx.from.username || 'no_username'}):`, error);
    ctx.replyWithMarkdown(
      '‚ùå *–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞!*\n' +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É'
    );
  }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ animals)
User.afterFind(user => {
  if (user && !user[`chicken_count`]) {
    user[`chicken_count`] = 0;
  }
  if (user && !user[`duck_count`]) {
    user[`duck_count`] = 0;
  }
  if (user && !user[`goose_count`]) {
    user[`goose_count`] = 0;
  }
  if (user && !user[`cow_count`]) {
    user[`cow_count`] = 0;
  }
  if (user && !user[`pig_count`]) {
    user[`pig_count`] = 0;
  }
  if (user && !user[`sheep_count`]) {
    user[`sheep_count`] = 0;
  }
  if (user && user.lastDailyBonus === null) {
    const fakeOldDate = new Date(new Date() - 25 * 60 * 60 * 1000);
    user.lastDailyBonus = fakeOldDate;
    user.chicken_count ||= 0;
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥
bot.command('add_money', async (ctx) => {
  console.log(`[ADMIN] add_money by ${ctx.from.id} (@${ctx.from.username || 'no_username'})`);
  if (!isAdmin(ctx)) return;
  
  const [userId, amount] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  user.money += parseFloat(amount);
  await user.save();
  ctx.reply(`‚úÖ ${user.id} –ø–æ–ª—É—á–µ–Ω–æ ${amount}üí∞`);
  ctx.telegram.sendMessage(userId, `–ü–æ–ª—É—á–µ–Ω–æ ${amount}üí∞ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.money.toFixed(2)}üí∞`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è–∏—Ü
bot.command('add_eggs', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, amount] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  user.eggs += parseFloat(amount);
  await user.save();
  ctx.reply(`‚úÖ ${user.id} –ø–æ–ª—É—á–µ–Ω–æ ${amount}ü•ö`);
  ctx.telegram.sendMessage(userId, `–ü–æ–ª—É—á–µ–Ω–æ ${amount}ü•ö –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.eggs.toFixed(2)}ü•ö`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–Ω–µ–≥
bot.command('set_money', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, amount] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  user.money = parseFloat(amount);
  await user.save();
  ctx.reply(`‚úÖ –î–ª—è ${user.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${amount}üí∞`);
  ctx.telegram.sendMessage(userId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å: ${amount}üí∞`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∏—Ü
bot.command('set_eggs', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, amount] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  user.eggs = parseFloat(amount);
  await user.save();
  ctx.reply(`‚úÖ –î–ª—è ${user.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${amount}ü•ö`);
  ctx.telegram.sendMessage(userId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏–ª —è–π—Ü–∞: ${amount}ü•ö`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥
bot.command('delete_money', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, amount] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  user.money = Math.max(0, user.money - parseFloat(amount));
  await user.save();
  ctx.reply(`‚úÖ –£ ${user.id} —Å–ø–∏—Å–∞–Ω–æ ${amount}üí∞`);
  ctx.telegram.sendMessage(userId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∞–ª: ${amount}üí∞\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.money.toFixed(2)}üí∞`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è —è–∏—Ü
bot.command('delete_eggs', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, amount] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  user.eggs = Math.max(0, user.eggs - parseFloat(amount));
  await user.save();
  ctx.reply(`‚úÖ –£ ${user.id} —Å–ø–∏—Å–∞–Ω–æ ${amount}ü•ö`);
  ctx.telegram.sendMessage(userId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∞–ª: ${amount}ü•ö\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.eggs.toFixed(2)}ü•ö`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö
bot.command('set_animal', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, animalId, count] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  if (!ANIMAL_CATEGORIES[animalId]) return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ');
  
  const field = `${animalId}_count`;
  user[field] = Math.max(0, parseInt(count));
  await user.save();
  ctx.reply(`‚úÖ –î–ª—è ${user.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${count} ${ANIMAL_CATEGORIES[animalId].producers.find(a => a.id === animalId)?.name}`);
  ctx.telegram.sendMessage(userId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏–ª: ${count} ${ANIMAL_CATEGORIES[animalId].producers.find(a => a.id === animalId)?.name}`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
bot.command('delete_animal', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const [userId, animalId, count] = ctx.message.text.split(' ').slice(1);
  const user = await User.findByPk(userId);
  
  if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  if (!ANIMAL_CATEGORIES[animalId]) return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ');
  
  const field = `${animalId}_count`;
  user[field] = Math.max(0, user[field] - parseInt(count));
  await user.save();
  ctx.reply(`‚úÖ –£ ${user.id} —Å–ø–∏—Å–∞–Ω–æ ${count} ${ANIMAL_CATEGORIES[animalId].producers.find(a => a.id === animalId)?.name}`);
  ctx.telegram.sendMessage(userId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∞–ª: ${count} ${ANIMAL_CATEGORIES[animalId].producers.find(a => a.id === animalId)?.name}\n–û—Å—Ç–∞–ª–æ—Å—å: ${user[field]}`);
});

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
const getAnimalPrice = (user, animalId) => {
  const animal = Object.values(ANIMAL_CATEGORIES)
    .flatMap(cat => cat.producers)
    .find(a => a.id === animalId);
  
  if (!animal) return Infinity;
  
  const count = user[`${animalId}_count`] || 0;
  return Math.round(animal.basePrice * Math.pow(1.10, count) * 100) / 100;
};

const getAnimalProduction = (user, producerId) => {
  const category = Object.values(ANIMAL_CATEGORIES).find(cat => 
    cat.producers.some(p => p.id === producerId)
  );
  const producer = category?.producers.find(p => p.id === producerId);
  return producer?.production || 0;
};

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.action(/^buy_category_(\w+)$/, async (ctx) => {
  const categoryId = ctx.match[1];
  const category = ANIMAL_CATEGORIES[categoryId];
  
  const buttons = category.producers.map(animal => {
    const currentPrice = getAnimalPrice(ctx.user, animal.id);
    return Markup.button.callback(
      `${animal.name.replace('üè≠ ', '')} ~${currentPrice}üí∞\n${animal.description}`,
      `buy_${animal.id}`
    );
  });
  
  ctx.editMessageText(
    `<b>${category.name.replace('üè≠ ', '')} - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</b>\n` +
    `–í–∞—à –±–∞–ª–∞–Ω—Å: ${ctx.user.money.toFixed(2)}üí∞`,
    {
      ...Markup.inlineKeyboard(buttons, { columns: 1 }),
      parse_mode: 'HTML'
    }
  );
});

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
bot.action(/^buy_(\w+)$/, async (ctx) => {
  const producerId = ctx.match[1];
  
  // –ò—â–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
  let producer;
  for (const cat of Object.values(ANIMAL_CATEGORIES)) {
    producer = cat.producers.find(p => p.id === producerId);
    if (producer) break;
  }
  
  if (!producer) {
    return ctx.answerCbQuery('‚ö†Ô∏è –ñ–∏–≤–æ—Ç–Ω–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω—ã
  let currentCount = ctx.user[`${producerId}_count`] || 0;
  let totalPriceFor1 = 0;
  let totalPriceFor5 = 0;
  let totalPriceFor10 = 0;
  let maxCount = 0;
  let tempPrice = 0;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤
  for (let i = 0; i < 1000; i++) {
    const price = producer.basePrice * Math.pow(1.10, currentCount + i);
    tempPrice += price;
    
    if (i < 1) totalPriceFor1 = tempPrice;
    if (i < 5) totalPriceFor5 = tempPrice;
    if (i < 10) totalPriceFor10 = tempPrice;
    
    if (ctx.user.money >= tempPrice) {
      maxCount = i + 1;
    } else {
      break;
    }
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ü–µ–Ω–∞–º–∏
  const buttons = [];
  [1, 5, 10].forEach(num => {
    const priceIndex = {1: 0, 5: 1, 10: 2}[num];
    const price = [totalPriceFor1, totalPriceFor5, totalPriceFor10][priceIndex];
    
    if (num <= maxCount && price) {
      buttons.push(Markup.button.callback(
        `${num} (${price.toFixed(0)}üí∞)`, 
        `buy:${producerId}:${num}`
      ));
    }
  });
  
  if (maxCount > 0) {
    let totalMaxPrice = 0;
    for (let i = 0; i < maxCount; i++) {
      totalMaxPrice += producer.basePrice * Math.pow(1.10, currentCount + i);
    }
    buttons.push(Markup.button.callback(
      `MAX (${maxCount}) ${totalMaxPrice.toFixed(0)}üí∞`, 
      `buy:${producerId}:${maxCount}`
    ));
  }

  await ctx.editMessageText(
    `–°–∫–æ–ª—å–∫–æ ${producer.name} —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?\n` +
    `–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${currentCount}\n` +
    `–¶–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ: ${(producer.basePrice * Math.pow(1.10, currentCount)).toFixed(2)}üí∞`,
    Markup.inlineKeyboard(buttons, { columns: 4 })
  );
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º
bot.action(/^buy:(\w+):(\d+)$/, async (ctx) => {
  const producerId = ctx.match[1];
  const count = parseInt(ctx.match[2]);
  
  // –ò—â–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
  let producer;
  for (const cat of Object.values(ANIMAL_CATEGORIES)) {
    producer = cat.producers.find(p => p.id === producerId);
    if (producer) break;
  }
  
  if (!producer || count < 1) {
    return ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞');
  }

  // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –î–û –ø–æ–∫—É–ø–∫–∏
  const purchaseTime = new Date();
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
  let totalPrice = 0;
  let currentCount = ctx.user[`${producerId}_count`] || 0;
  for(let i = 0; i < count; i++) {
    totalPrice += producer.basePrice * Math.pow(1.10, currentCount + i);
  }
  totalPrice = parseFloat(totalPrice.toFixed(2));

  if (ctx.user.money < totalPrice) {
    return ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
  ctx.user.money = parseFloat((ctx.user.money - totalPrice).toFixed(2));
  ctx.user[`${producerId}_count`] += count;
  
  // –í–∞–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞
  ctx.user.lastCollection = purchaseTime;
  
  await ctx.user.save();
  
  // –ù–æ–≤–∞—è —Ü–µ–Ω–∞
  const nextPrice = producer.basePrice * Math.pow(1.10, currentCount + count);
  
  ctx.editMessageText(
    `‚úÖ –ö—É–ø–ª–µ–Ω–æ ${count} ${producer.name}\n` +
    `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice.toFixed(2)}üí∞\n` +
    `üìâ –°–ª–µ–¥—É—é—â–∞—è —Ü–µ–Ω–∞: ${nextPrice.toFixed(2)}üí∞`
  );
  ctx.answerCbQuery();
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"
bot.hears('üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', (ctx) => {
  ctx.reply(
    'üìÇ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:',
    Markup.inlineKeyboard([
      Markup.button.callback('üèÜ –õ–∏–¥–µ—Ä—ã', 'show_leaders'),
      Markup.button.callback('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', 'daily_bonus'),
      Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'show_help')
    ], { columns: 2 })
  );
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getResourceName
const getResourceName = (resource) => {
  const names = {
    eggs: '–Ø–π—Ü–∞',
    feathers: '–ü–µ—Ä—å—è',
    down: '–ü—É—Ö',
    wool: '–®–µ—Ä—Å—Ç—å',
    milk: '–ú–æ–ª–æ–∫–æ',
    meat: '–ú—è—Å–æ'
  };
  return names[resource] || '—Ä–µ—Å—É—Ä—Å–∞';
};

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleDailyBonus
const handleDailyBonus = async (ctx) => {
  const user = ctx.user;
  const now = new Date();
  
  if (user.lastDailyBonus === null) {
    const fakeOldDate = new Date(now.getTime() - 25 * 60 * 60 * 1000);
    user.lastDailyBonus = fakeOldDate;
    await user.save();
  }

  const lastBonus = new Date(user.lastDailyBonus);
  const nextBonusDate = new Date(lastBonus.getTime() + 24 * 60 * 60 * 1000);
  const hoursDiff = Math.floor((now - lastBonus) / (1000 * 60 * 60));
  
  if (hoursDiff < 24) {
    await ctx.deleteMessage();
    return ctx.replyWithMarkdown(
      `‚è≥ *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ:* ${lastBonus.toLocaleString('ru-RU')}\n` +
      `‚åõ *–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å:* ${nextBonusDate.toLocaleString('ru-RU')}`
    );
  }

  const bonusAmount = Math.floor(Math.random() * 101) + 50;
  user.money += bonusAmount;
  user.lastDailyBonus = now;
  await user.save();

  console.log(`[DAILY] User ${ctx.from.id} (@${ctx.from.username || 'no_username'}) –ø–æ–ª—É—á–∏–ª ${bonusAmount}üí∞`);
  await ctx.deleteMessage();
  ctx.replyWithMarkdown(
    `üéâ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!*\n` +
    `üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏: ${bonusAmount}üí∞\n` +
    `‚è≥ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å: ${nextBonusDate.toLocaleString('ru-RU')}\n` +
    `üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.money.toFixed(2)}üí∞`
  );
};

// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ–Ω—É—Å–∞
bot.action('daily_bonus', handleDailyBonus);
bot.hears('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', handleDailyBonus);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–¥–∞–∂–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
const setupSellHandlers = () => {
  const resources = ['eggs', 'feathers', 'down', 'wool', 'milk', 'meat'];
  
  resources.forEach(resource => {
    bot.action(`sell_${resource}`, async (ctx) => {
      await handleSellResource(ctx, resource, 'all');
    });
  });

  bot.action('sell_all', async (ctx) => {
    for (const res of RESOURCE_TYPES) {
      await handleSellResource(ctx, res, 'all');
    }
    await ctx.answerCbQuery('‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–æ–¥–∞–Ω—ã');
  });
};

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂–∏
const handleSellResource = async (ctx, resource, amount = 'all') => {
  const user = ctx.user;
  const price = RESOURCE_PRICES[resource];
  
  if (user[resource] <= 0) {
    return ctx.answerCbQuery(`‚ùå –ù–µ—Ç ${getResourceName(resource)} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏`);
  }

  const sellAmount = amount === 'all' 
    ? user[resource] 
    : Math.min(amount, user[resource]);

  const total = sellAmount * price;
  
  user[resource] -= sellAmount;
  user.money += total;
  
  await user.save();
  
  ctx.answerCbQuery(`‚úÖ –ü—Ä–æ–¥–∞–Ω–æ ${sellAmount.toFixed(2)} ${getResourceName(resource)} –∑–∞ ${total.toFixed(2)}üí∞`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
  const message = await ctx.editMessageText(
    `üí∞ *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–¥–∞–∂–∏:*\n` +
    `${getResourceEmoji(resource)} ${getResourceName(resource)}: -${sellAmount.toFixed(2)}\n` +
    `üíµ –ü–æ–ª—É—á–µ–Ω–æ: ${total.toFixed(2)}üí∞\n\n` +
    `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...`
  );
  
  // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  setTimeout(async () => {
    await ctx.telegram.editMessageText(
      message.chat.id,
      message.message_id,
      null,
      `üí∞ *–†–µ—Å—É—Ä—Å—ã –ø—Ä–æ–¥–∞–Ω—ã!*\n` +
      `üíµ –ü–æ–ª—É—á–µ–Ω–æ: ${total.toFixed(2)}üí∞\n` +
      `üìä –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.money.toFixed(2)}üí∞`,
      { parse_mode: 'Markdown' }
    );
  }, 1000);
};

// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const getResourceEmoji = (resource) => {
  const emojis = {
    eggs: 'ü•ö',
    feathers: 'ü™∂',
    down: 'üõå',
    wool: 'üß∂',
    milk: 'ü•õ',
    meat: 'ü•©'
  };
  return emojis[resource] || '';
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
setupSellHandlers();

// –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
bot.launch().then(() => console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω'));

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot.command('manage_resource', async (ctx) => {
  if (!isAdmin(ctx)) return;
  // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã ...
});

bot.command('manage_money', async (ctx) => {
  if (!isAdmin(ctx)) return;
  // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã ...
});

bot.command('manage_producer', async (ctx) => {
  if (!isAdmin(ctx)) return;
  // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã ...
});

bot.command('user_info', async (ctx) => {
  if (!isAdmin(ctx)) return;
  // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã ...
});

bot.command('send_message', async (ctx) => {
  if (!isAdmin(ctx)) return;
  // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã ...
});

bot.command('admin_help', (ctx) => {
  if (!isAdmin(ctx)) return;
  // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã ...
});
